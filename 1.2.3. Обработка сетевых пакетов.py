#Обработка сетевых пакетов
#Вход. Размер буфера size и число пакетов n, а также две последовательности arrival1 и duration1, ..., arrivaln и durationn, обозначающих время поступления и длительность обработки n пакетов.
#Выход. Для каждого из данных n пакетов необходимо вывести время начала его обработки или −1, если пакет не был обработан (это происходит в случае, когда пакет поступает в момент, когда в буфере компьютера уже находится size пакетов).

def check(t):
    if len(buf) == 0:
        return True
    if buf[0] <= t: 
        buf.pop(0)
    if len(buf) < size:
        return True
    return False


def solve():
    p = 0
    for i in range(n):    #для каждого пакета
        t, d = [int(s) for s in input().split()]    #определяем время прибытия и длительность

        if check(t):    #функция обрабатывающая время прибытия, будет true если в буфере есть возможность принять пакет
            time = max(t, p)    #время начала обработки пакета    
            log.append(time)
            buf.append(time + d)    
            p = max(time + d, p)    #время окончания обработки пакета
        else:
            log.append(-1)

    for x in log:
        print(x)


if __name__ == '__main__':
    size, n = [int(s) for s in input().split()]
    buf = []    #буфер
    log = []    #ответ на задачу, время начла обработки каждого пакета

    solve()
